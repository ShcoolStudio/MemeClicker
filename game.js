// –ò–≥—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
class GameState {
    constructor() {
        this.money = 0;
        this.clickPower = 1;
        this.clickBonus = 0; // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –∑–∞ –∫–ª–∏–∫
        this.totalIncome = 0;
        this.ownedMemes = {};
        this.upgrades = {};
        this.totalClicks = 0;
        this.totalEarned = 0;
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
    save() {
        const saveData = {
            money: this.money,
            clickPower: this.clickPower,
            clickBonus: this.clickBonus,
            totalIncome: this.totalIncome,
            ownedMemes: this.ownedMemes,
            upgrades: this.upgrades,
            totalClicks: this.totalClicks,
            totalEarned: this.totalEarned
        };
        localStorage.setItem('memeClickerSave', JSON.stringify(saveData));
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ localStorage
    load() {
        const saveData = localStorage.getItem('memeClickerSave');
        if (saveData) {
            const data = JSON.parse(saveData);
            this.money = data.money || 0;
            this.clickPower = data.clickPower || 1;
            this.clickBonus = data.clickBonus || 0;
            this.totalIncome = data.totalIncome || 0;
            this.ownedMemes = data.ownedMemes || {};
            this.upgrades = data.upgrades || {};
            this.totalClicks = data.totalClicks || 0;
            this.totalEarned = data.totalEarned || 0;
            return true;
        }
        return false;
    }
}

// –î–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π-–º–µ–º–æ–≤
const MEME_CHARACTERS = [
    {
        id: 'doge',
        name: '–î–æ—Ç–∞–∫—ç—Ç',
        emoji: 'üêï',
        basePrice: 10,
        baseIncome: 1,
        incomeInterval: 5000, // 5 —Å–µ–∫—É–Ω–¥
        description: '–í–µ—Ä–Ω—ã–π –¥—Ä—É–≥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–æ—Å–∏—Ç –º–æ–Ω–µ—Ç—ã –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥',
        multiplier: 1.15 // –ú–Ω–æ–∂–∏—Ç–µ–ª—å —Ü–µ–Ω—ã –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ
    },
    {
        id: 'lazycat',
        name: '–õ–µ–Ω–∏–≤—ã–π –∫–æ—Ç–∏–∫',
        emoji: 'üê±',
        basePrice: 50,
        baseIncome: 0, // –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π –±–æ–Ω—É—Å
        incomeInterval: 0,
        description: '–î–∞—ë—Ç 1% –±–æ–Ω—É—Å –∫–æ –≤—Å–µ–º—É –∑–∞—Ä–∞–±–æ—Ç–∫—É',
        multiplier: 1.2,
        bonusType: 'percentage',
        bonusValue: 0.01
    },
    {
        id: 'nikita',
        name: '–°—Ç—Ä–∞–Ω—Å—Ç–≤—É—é—â–∏–π –ù–∏–∫–∏—Ç–∞',
        emoji: 'üö∂‚Äç‚ôÇÔ∏è',
        basePrice: 100,
        baseIncome: 0,
        incomeInterval: 0,
        description: '–ü–æ–≤—ã—à–∞–µ—Ç –æ–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –Ω–∞ 5%',
        multiplier: 1.25,
        bonusType: 'percentage',
        bonusValue: 0.05
    },
    {
        id: 'chad',
        name: 'Chad',
        emoji: 'üí™',
        basePrice: 500,
        baseIncome: 2,
        incomeInterval: 3000,
        description: '–°–∏–ª—å–Ω—ã–π –º–µ–º, –ø—Ä–∏–Ω–æ—Å–∏—Ç 2 –º–æ–Ω–µ—Ç—ã –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã',
        multiplier: 1.3
    },
    {
        id: 'wojak',
        name: '–í–æ–π–∞–∫',
        emoji: 'üò¢',
        basePrice: 1000,
        baseIncome: 5,
        incomeInterval: 4000,
        description: '–ü–µ—á–∞–ª—å–Ω—ã–π, –Ω–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –º–µ–º',
        multiplier: 1.35
    },
    {
        id: 'gigachad',
        name: '–ì–∏–≥–∞—á–∞–¥',
        emoji: 'ü¶ç',
        basePrice: 5000,
        baseIncome: 15,
        incomeInterval: 2000,
        description: '–ê–ª—å—Ñ–∞-–º–µ–º —Å –≤—ã—Å–æ–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é',
        multiplier: 1.4
    }
];

// –î–∞–Ω–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏–π
const UPGRADES = [
    {
        id: 'click_bonus_1',
        name: '–ë–æ–Ω—É—Å–Ω—ã–π –∫–ª–∏–∫',
        emoji: 'üí∞',
        description: '–î–æ–±–∞–≤–ª—è–µ—Ç +1 –º–æ–Ω–µ—Ç—É –∑–∞ –∫–∞–∂–¥—ã–π –∫–ª–∏–∫',
        basePrice: 50,
        effect: 'clickBonus',
        effectValue: 1,
        multiplier: 2,
        stackable: true
    },
    {
        id: 'superman_hands',
        name: '–†—É–∫–∏ —Å—É–ø–µ—Ä–º–µ–Ω–∞',
        emoji: 'ü¶∏‚Äç‚ôÇÔ∏è',
        description: '–£–¥–≤–∞–∏–≤–∞–µ—Ç –º–æ—â–Ω–æ—Å—Ç—å –∫–ª–∏–∫–æ–≤',
        basePrice: 100,
        effect: 'clickPower',
        effectValue: 2,
        multiplier: 2.5
    },
    {
        id: 'click_bonus_2',
        name: '–£—Å–∏–ª–µ–Ω–Ω—ã–π –∫–ª–∏–∫',
        emoji: 'üíé',
        description: '–î–æ–±–∞–≤–ª—è–µ—Ç +2 –º–æ–Ω–µ—Ç—ã –∑–∞ –∫–∞–∂–¥—ã–π –∫–ª–∏–∫',
        basePrice: 200,
        effect: 'clickBonus',
        effectValue: 2,
        multiplier: 2.2,
        stackable: true
    },
    {
        id: 'elon_tech',
        name: '–ò–ª–æ–Ω-–ú–∞—Å–∫-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
        emoji: 'üöÄ',
        description: '–£—Ç—Ä–∞–∏–≤–∞–µ—Ç –º–æ—â–Ω–æ—Å—Ç—å –∫–ª–∏–∫–æ–≤',
        basePrice: 500,
        effect: 'clickPower',
        effectValue: 3,
        multiplier: 3
    },
    {
        id: 'click_bonus_5',
        name: '–°—É–ø–µ—Ä –∫–ª–∏–∫',
        emoji: 'üí™',
        description: '–î–æ–±–∞–≤–ª—è–µ—Ç +5 –º–æ–Ω–µ—Ç –∑–∞ –∫–∞–∂–¥—ã–π –∫–ª–∏–∫',
        basePrice: 1000,
        effect: 'clickBonus',
        effectValue: 5,
        multiplier: 2.5,
        stackable: true
    },
    {
        id: 'meme_power',
        name: '–ú–µ–º–Ω–∞—è —Å–∏–ª–∞',
        emoji: '‚ö°',
        description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –¥–æ—Ö–æ–¥ –≤—Å–µ—Ö –º–µ–º–æ–≤ –Ω–∞ 10%',
        basePrice: 2000,
        effect: 'incomeMultiplier',
        effectValue: 1.1,
        multiplier: 2.8
    },
    {
        id: 'click_bonus_10',
        name: '–ú–µ–≥–∞ –∫–ª–∏–∫',
        emoji: 'üåü',
        description: '–î–æ–±–∞–≤–ª—è–µ—Ç +10 –º–æ–Ω–µ—Ç –∑–∞ –∫–∞–∂–¥—ã–π –∫–ª–∏–∫',
        basePrice: 5000,
        effect: 'clickBonus',
        effectValue: 10,
        multiplier: 3,
        stackable: true
    }
];

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∏–≥—Ä—ã
class MemeClickerGame {
    constructor() {
        this.gameState = new GameState();
        this.incomeInterval = null;
        this.init();
    }

    init() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        if (this.gameState.load()) {
            console.log('–ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        }

        this.setupEventListeners();
        this.setupShop();
        this.setupUpgrades();
        this.startIncomeLoop();
        this.updateDisplay();
        this.addBackgroundMemes();
        
        // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        setInterval(() => this.gameState.save(), 30000);
    }

    setupEventListeners() {
        const mainMeme = document.getElementById('mainMeme');
        mainMeme.addEventListener('click', (e) => this.handleClick(e));
        
        // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ touch –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        mainMeme.addEventListener('touchstart', (e) => {
            e.preventDefault();
            this.handleClick(e);
        });
    }

    handleClick(event) {
        const earnings = this.gameState.clickPower + this.gameState.clickBonus;
        this.gameState.money += earnings;
        this.gameState.totalClicks++;
        this.gameState.totalEarned += earnings;

        this.showClickEffect(event, `+${earnings}`);
        this.updateDisplay();
        this.gameState.save();
    }

    showClickEffect(event, text) {
        const container = document.getElementById('clickEffects');
        const effect = document.createElement('div');
        effect.className = 'click-effect';
        effect.textContent = text;

        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–ª–∏–∫–∞
        const rect = event.target.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const y = event.clientY - rect.top;

        effect.style.left = `${x}px`;
        effect.style.top = `${y}px`;

        container.appendChild(effect);

        // –£–¥–∞–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
            if (effect.parentNode) {
                effect.parentNode.removeChild(effect);
            }
        }, 1000);
    }

    setupShop() {
        const shopGrid = document.getElementById('shopGrid');
        shopGrid.innerHTML = '';

        MEME_CHARACTERS.forEach(meme => {
            const item = this.createShopItem(meme);
            shopGrid.appendChild(item);
        });
    }

    createShopItem(meme) {
        const item = document.createElement('button');
        item.className = 'shop-item';
        
        const owned = this.gameState.ownedMemes[meme.id] || 0;
        const price = this.calculatePrice(meme, owned);
        const canAfford = this.gameState.money >= price;

        item.disabled = !canAfford;

        item.innerHTML = `
            <div class="item-header">
                <span class="item-emoji">${meme.emoji}</span>
                <span class="item-name">${meme.name}</span>
                <span class="item-price">${this.formatNumber(price)}</span>
            </div>
            <div class="item-description">${meme.description}</div>
            <div class="item-stats">
                ${owned > 0 ? `–ö—É–ø–ª–µ–Ω–æ: ${owned}` : ''}
                ${meme.bonusType === 'percentage' ? 
                    `–ë–æ–Ω—É—Å: +${(meme.bonusValue * 100)}%` : 
                    `–î–æ—Ö–æ–¥: ${meme.baseIncome}/—Å–µ–∫`
                }
            </div>
        `;

        item.addEventListener('click', () => this.buyMeme(meme.id));

        return item;
    }

    setupUpgrades() {
        const upgradesGrid = document.getElementById('upgradesGrid');
        upgradesGrid.innerHTML = '';

        UPGRADES.forEach(upgrade => {
            const item = this.createUpgradeItem(upgrade);
            upgradesGrid.appendChild(item);
        });
    }

    createUpgradeItem(upgrade) {
        const item = document.createElement('button');
        item.className = 'upgrade-item';
        
        const owned = this.gameState.upgrades[upgrade.id] || 0;
        const price = this.calculateUpgradePrice(upgrade, owned);
        const canAfford = this.gameState.money >= price;

        // –î–ª—è stackable —É–ª—É—á—à–µ–Ω–∏–π –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
        if (upgrade.stackable) {
            item.disabled = !canAfford;
        } else {
            item.disabled = !canAfford || owned > 0;
        }

        item.innerHTML = `
            <div class="item-header">
                <span class="item-emoji">${upgrade.emoji}</span>
                <span class="item-name">${upgrade.name}</span>
                <span class="item-price">${this.formatNumber(price)}</span>
            </div>
            <div class="item-description">${upgrade.description}</div>
            <div class="item-stats">
                ${owned > 0 ? `–ö—É–ø–ª–µ–Ω–æ: ${owned}${upgrade.stackable ? ' —Ä–∞–∑' : ' ‚úì'}` : '–ù–µ –∫—É–ø–ª–µ–Ω–æ'}
            </div>
        `;

        item.addEventListener('click', () => this.buyUpgrade(upgrade.id));

        return item;
    }

    buyMeme(memeId) {
        const meme = MEME_CHARACTERS.find(m => m.id === memeId);
        const owned = this.gameState.ownedMemes[memeId] || 0;
        const price = this.calculatePrice(meme, owned);

        if (this.gameState.money >= price) {
            this.gameState.money -= price;
            this.gameState.ownedMemes[memeId] = (this.gameState.ownedMemes[memeId] || 0) + 1;
            
            this.updateDisplay();
            this.setupShop();
            this.addBackgroundMeme(meme);
            this.showNotification(`–ö—É–ø–ª–µ–Ω ${meme.name}!`);
            this.gameState.save();
        }
    }

    buyUpgrade(upgradeId) {
        const upgrade = UPGRADES.find(u => u.id === upgradeId);
        const owned = this.gameState.upgrades[upgradeId] || 0;
        const price = this.calculateUpgradePrice(upgrade, owned);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏
        const canBuy = this.gameState.money >= price && 
                      (upgrade.stackable || owned === 0);

        if (canBuy) {
            this.gameState.money -= price;
            this.gameState.upgrades[upgradeId] = (this.gameState.upgrades[upgradeId] || 0) + 1;
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —É–ª—É—á—à–µ–Ω–∏—è
            if (upgrade.effect === 'clickPower') {
                this.gameState.clickPower *= upgrade.effectValue;
            } else if (upgrade.effect === 'clickBonus') {
                this.gameState.clickBonus += upgrade.effectValue;
            }
            
            this.updateDisplay();
            this.setupUpgrades();
            this.showNotification(`–ö—É–ø–ª–µ–Ω–æ —É–ª—É—á—à–µ–Ω–∏–µ: ${upgrade.name}!`);
            this.gameState.save();
        }
    }

    calculatePrice(meme, owned) {
        return Math.floor(meme.basePrice * Math.pow(meme.multiplier, owned));
    }

    calculateUpgradePrice(upgrade, owned) {
        if (owned > 0) return Infinity;
        return Math.floor(upgrade.basePrice * Math.pow(upgrade.multiplier, owned));
    }

    calculateTotalIncome() {
        let income = 0;
        let percentageBonus = 0;

        // –°—á–∏—Ç–∞–µ–º –¥–æ—Ö–æ–¥ –æ—Ç –º–µ–º–æ–≤
        Object.keys(this.gameState.ownedMemes).forEach(memeId => {
            const meme = MEME_CHARACTERS.find(m => m.id === memeId);
            const owned = this.gameState.ownedMemes[memeId];
            
            if (meme.bonusType === 'percentage') {
                percentageBonus += meme.bonusValue * owned;
            } else {
                income += (meme.baseIncome * owned * 1000) / meme.incomeInterval;
            }
        });

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –±–æ–Ω—É—Å—ã
        income *= (1 + percentageBonus);

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è
        if (this.gameState.upgrades.meme_power) {
            income *= 1.1;
        }

        return income;
    }

    startIncomeLoop() {
        if (this.incomeInterval) {
            clearInterval(this.incomeInterval);
        }

        this.incomeInterval = setInterval(() => {
            const income = this.calculateTotalIncome();
            if (income > 0) {
                this.gameState.money += income;
                this.gameState.totalEarned += income;
                this.updateDisplay();
                this.gameState.save();
            }
        }, 1000);
    }

    updateDisplay() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–Ω—å–≥–∏
        document.getElementById('money').textContent = this.formatNumber(this.gameState.money);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Ö–æ–¥
        const income = this.calculateTotalIncome();
        document.getElementById('income').textContent = this.formatNumber(income);
        this.gameState.totalIncome = income;

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–≥–∞–∑–∏–Ω –∏ —É–ª—É—á—à–µ–Ω–∏—è
        this.setupShop();
        this.setupUpgrades();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏–ª—É –∫–ª–∏–∫–∞
        const clickPowerElement = document.querySelector('.click-power');
        const totalClickPower = this.gameState.clickPower + this.gameState.clickBonus;
        clickPowerElement.textContent = `+${totalClickPower} –º–æ–Ω–µ—Ç`;
    }

    addBackgroundMemes() {
        Object.keys(this.gameState.ownedMemes).forEach(memeId => {
            const meme = MEME_CHARACTERS.find(m => m.id === memeId);
            const owned = this.gameState.ownedMemes[memeId];
            
            for (let i = 0; i < owned; i++) {
                this.addBackgroundMeme(meme);
            }
        });
    }

    addBackgroundMeme(meme) {
        const container = document.getElementById('backgroundMemes');
        const backgroundMeme = document.createElement('div');
        backgroundMeme.className = 'background-meme';
        backgroundMeme.textContent = meme.emoji;
        
        // –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
        backgroundMeme.style.left = Math.random() * 100 + '%';
        backgroundMeme.style.top = Math.random() * 100 + '%';
        backgroundMeme.style.animationDelay = Math.random() * 6 + 's';
        
        container.appendChild(backgroundMeme);
    }

    showNotification(message) {
        const container = document.getElementById('notifications');
        const notification = document.createElement('div');
        notification.className = 'notification';
        notification.textContent = message;
        
        container.appendChild(notification);
        
        // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 3000);
    }

    formatNumber(num) {
        if (num >= 1000000000) {
            return (num / 1000000000).toFixed(1) + 'B';
        } else if (num >= 1000000) {
            return (num / 1000000).toFixed(1) + 'M';
        } else if (num >= 1000) {
            return (num / 1000).toFixed(1) + 'K';
        }
        return Math.floor(num).toString();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –∫–æ–≥–¥–∞ DOM –∑–∞–≥—Ä—É–∂–µ–Ω
document.addEventListener('DOMContentLoaded', () => {
    window.game = new MemeClickerGame();
});
